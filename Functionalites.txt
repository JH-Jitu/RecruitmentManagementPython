A console project for Recruiting Management in Python
There will be 4 files for 4 classes as Panels:
1. Developers
2. Recruiters
3. Companies
4. Admin

There will be more files to execute processes:
5. Login
6. Registration
7. ApplyToJob
8. AssignRecruiterFromCompany
9. SetInterviewByRecruiter
10. Utility => There will be DB as text files, For example, userFilePath = "DB\\userDB.txt" (DB Folder files will be connected there)
11. Execute

DB Folder: There will be a folder Named DB and there will be 'txt' files which will be used as Database. ** If database (txt) files are not there, create via python code when they needed
1. AvailableJobs (Information of Jobs from Companies)
2. AppliedJobsOfDevelopers
3. RegisteredDevelopers
4. RegisteredRecruiters
5. RegisteredCompanies
6. Admins
7. Interviews 
8. MessagesForDevelopers
9. MessagesForRecruiters
10. MessagesForCompanies

For developers functionality:
Developers have properties like
1. Personal information: Email, password (hidden on other objects), Name, Age, Expertise skills, project links, LinkedIn link (All required) (data Saved in RegisteredDevelopers.txt
2. Apply to Job: ApplyToJob file will be executed. (Show list of jobs and their companies personal information after filtered with the one of any 'Expertise skills' of that developer with job description 'Required Skills' from AvailableJobs.txt and apply by pressing the serial there) (Data will be saved in AppliedJobsOfDevelopers.txt with the personal information of the developer and the company)
3. Messages: list of success or failed messages from a Recruiter  (Data Saved in MessagesForDevelopers.txt)
4. Interviews: list of Available Interview from Recruiters (Data from in Interviews.txt)

For Recruiters functionality:
Recruiters have properties like
1. Personal information: Same as personal information of developers (saved in RegisteredRecruiters.txt)
2. Messages: list of assigned as a recruiter for any job from a Company (data from MessagesForRecruiters)
3. See Interviews: list of Available Interview from Recruiters (Data from in Interviews.txt)
4. Set Interview: Set an interview for a developer from the list of AppliedJobsOfDevelopers. Property will be: DateAndTime, AssignmentLink, GoogleMeetLink, ListOfParticipators (Email id of Other recruiters) (Data will Saved in  Interviews.txt)  (Execute in SetInterviewByRecruiter)
5. Approvement of a Developer: success or fail message to developers from the list of AppliedJobsOfDevelopers and will be saved in MessagesForRecruiters.txt and MessagesForCompanies.

For Companies functionality: 
Companies have properties like
1. Personal Information: Company Name, email, password (hidden on other objects), license no, company Employee Number (Data Saved in RegisteredCompanies.txt)
2. Create a job: Create job => field will be: jobId: Random autogenerated Number, Role Name, Required Skills, Job Description, Joining Date, Assign Recruiter (will show the list of recruiter and after press the Email of the Recruiter will be saved to ) (Data will be saved in AvailableJobs.txt)
3. Delete a job (list of Available jobs will be shown from AvailableJobs.txt with the filtering with the email of the company and can be deleted by pressing one of the list no)
4. Available Jobs: list of Available jobs from AvailableJobs.txt with the filtering with the email of the company 

For Admins functionality:
Admins have properties like
1. Personal information: name, email, , password (hidden on other objects), createdDate (from Admins.txt)
2. Create Recruiter: field will be the personal information of Recruiters and will be saved in RegisteredRecruiters.txt)
3. Delete a Company: (List of Company will be shown from RegisteredCompanies.txt and there jobs (filtered with that company email) will be deleted from the RegisteredCompanies.txt and AvailableJobs.txt
4. Delete a Recruiter: (List of Company will be shown from RegisteredCompanies.txt and there jobs (filtered with that Recruiter email of Assign Recruiter) will be deleted from the RegisteredRecruiters.txt and AvailableJobs.txt
5. Delete a Developer: Delete a developer from RegisteredDevelopers.txt
6. Create a Admin with personal information property and will be saved in Admins.txt)


Now Execute:
All functions will be run from Execute. When run Execute.py

First Display will be:
1. Login 
2. Registration

If 2 (Registration) Pressed: Then, functionality from Registration file will be execute
Register as a
1. Developer => If Click 1 here, then, Personal Information of Developers fields will be appeared and they have to be given as input (will be saved in RegisteredDevelopers.txt)
2. Company => If Click 2 here, then, Personal Information of Companies fields will be appeared and they have to be given as input (will be saved in RegisteredCompanies.txt)
After The successful registration: User will be returned to the First Display

If 1 (Login) Pressed: Then,functionality from Login file will be execute
and Panel Display will be appeared...
Login as 
1. Developer
2. Recruiter
3. Company
4. Admin

After clicking one of these user have to give email and password to authenticate from:

If 1 (Developer) is Pressed (authenticate from RegisteredDevelopers):
Then, For developers functionality will be executed

If 2 (Recruiter) is Pressed (authenticate from RegisteredRecruiters)::
Then, For recruiters functionality will be executed

If 3 (Company) is Pressed (authenticate from RegisteredCompanies)::
Then, For companies functionality will be executed

If 4 (Admin) is Pressed (authenticate from Admins)::
Then, For admins functionality will be executed

### All Utility Methods
def option():
    print("\n### Press any option and hit enter ###")
def MainMenu():
    os.system('cls')
    option()
    print("1. Login")
    print("2. Registration")
    print("3. Exit")

def LoginOption():
    os.system('cls')
    option()
    print("Login As")
    print("1. Developer")
    print("2. Recruiter")
    print("3. Company")
    print("4. Admin")
    print("5. Back")
    print("5. Back to Main Menu")
    print("5. Exit")
    
        
def pause():
    print("Press any key to continue!")
    input()
